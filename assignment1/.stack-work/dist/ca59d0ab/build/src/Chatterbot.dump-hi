
==================== FINAL INTERFACE ====================
2017-04-24 15:46:33.2015445 UTC

interface assignment1-0.1.0.0-2RzjC4JpVbO6M4vQTQJu9q:Chatterbot 8002
  interface hash: 249ac49ae0face8aac1c3d3f6a2d152b
  ABI hash: 276f9772290675b791290bd44d659f14
  export-list hash: 0fabdc4a11a33f32aeb43bb47b3aef25
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 60831682a37a02a996a9ac6f4cd42371
  sig of: Nothing
  used TH splices: False
  where
exports:
  Chatterbot.chatterbot
  Chatterbot.endOfDialog
  Chatterbot.longerWildcardMatch
  Chatterbot.match
  Chatterbot.prepare
  Chatterbot.present
  Chatterbot.reduce
  Chatterbot.reductions
  Chatterbot.reductionsApply
  Chatterbot.reflect
  Chatterbot.reflections
  Chatterbot.rulesApply
  Chatterbot.rulesCompile
  Chatterbot.singleWildcardMatch
  Chatterbot.stateOfMind
  Chatterbot.substitute
  Chatterbot.transformationApply
  Chatterbot.transformationsApply
  Chatterbot.BotBrain
  Chatterbot.Phrase
  Chatterbot.PhrasePair
module dependencies: Utilities
package dependencies: Win32-2.3.1.1@Win32-2.3.1.1
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog*
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  Utilities 01a641d3c26e1bf0b92dd8f02c4b9be2
  exports: 26ff6c4df3dc95a98eeaa41289ba5f83
  fix d47cef3ea98151573d4e71837fc427d4
  map2 ab958694963d89dcc3f924a891221832
  mmap 43a7ec3ec2a7b4fc88b4f9140c99997a
  orElse 8f90644c1a8844d63ca97e7e76669242
  pick d050d19cd22d7bce3084871f9eee6e51
  try 2b5e83b930c6572ab31231213ee8f531
import  -/  base-4.9.1.0:Data.Char c49b58282af11503cc838e1052cf6b83
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.Maybe ecf0c6f81372d9b58b142d5e758ea51b
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Unicode 7b64ed854a326c2c5bb224f237ed4a0b
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:System.IO 5daf3f384209c11d9566e3409af8ec5d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random 4c90117f915e12291e0c5f588320bf66
1e9a899ef462ef307d987c3c0fdbac02
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Chatterbot.$trModule2
                   Chatterbot.$trModule1) -}
d50c451e5303ca23a8e9dc2c439cf9cd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Chatterbot"#) -}
903f8a685e4aa501b5a2c97d8f439b8f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "assignment1-0.1.0.0-2RzjC4JpVbO6M4vQTQJu9q"#) -}
cfc8c32b99a30d160e78e8b35a12ecf3
  $w$stransformationApply ::
    [GHC.Types.Char]
    -> ([[GHC.Types.Char]] -> [[GHC.Types.Char]])
    -> [[GHC.Types.Char]]
    -> [[GHC.Types.Char]]
    -> [[GHC.Types.Char]]
    -> GHC.Base.Maybe [[GHC.Types.Char]]
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,1*C1(U)><S,U><S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Char])
                   (w1 :: [[GHC.Types.Char]] -> [[GHC.Types.Char]])
                   (w2 :: [[GHC.Types.Char]])
                   (ww :: [[GHC.Types.Char]])
                   (ww1 :: [[GHC.Types.Char]]) ->
                 case Chatterbot.chatterbot_$smatch w ww w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ [[GHC.Types.Char]]
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ [[GHC.Types.Char]]
                        (Chatterbot.chatterbot_$ssubstitute w ww1 (w1 x)) }) -}
0371acc526a771d72817dcdbef7e75e1
  $wtransformationApply ::
    GHC.Classes.Eq a =>
    a -> ([a] -> [a]) -> [a] -> [a] -> [a] -> GHC.Base.Maybe [a]
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)))><L,U><L,1*C1(U)><S,U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: a)
                   (w2 :: [a] -> [a])
                   (w3 :: [a])
                   (ww :: [a])
                   (ww1 :: [a]) ->
                 case Chatterbot.match @ a w w1 ww w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ [a]
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ [a]
                        (Chatterbot.substitute @ a w w1 ww1 (w2 x)) }) -}
533465e74d2fa599fb30e257607f90b1
  type BotBrain = [(Chatterbot.Phrase, [Chatterbot.Phrase])]
9455e0259022bdbad4cb83524cb65236
  type Phrase = [GHC.Base.String]
56fe8000faf6d14113513a5ff5e40e61
  type PhrasePair = (Chatterbot.Phrase, Chatterbot.Phrase)
6dc72600dd986da4689ae3f467364983
  chatterbot ::
    GHC.Base.String
    -> [(GHC.Base.String, [GHC.Base.String])] -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Chatterbot.chatterbot1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <[(GHC.Base.String, [GHC.Base.String])]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ca22ca5cdcc9c68dd244e07c24bd343f
  chatterbot1 ::
    GHC.Base.String
    -> [(GHC.Base.String, [GHC.Base.String])]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (botName :: GHC.Base.String)
                   (botRules :: [(GHC.Base.String, [GHC.Base.String])])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "\n\
                           \\n\
                           \Hi! I am "#
                           (GHC.Base.++ @ GHC.Types.Char botName Chatterbot.chatterbot9))
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Chatterbot.chatterbot8
                        GHC.Types.False
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 letrec {
                   botloop :: GHC.Prim.State# GHC.Prim.RealWorld
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.IO.Handle.Internals.wantReadableHandle_1
                            @ GHC.Base.String
                            GHC.IO.Handle.Text.hGetLine4
                            GHC.IO.Handle.FD.stdin
                            GHC.IO.Handle.Text.hGetLine2
                              `cast`
                            (<GHC.IO.Handle.Types.Handle__>_R
                             ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                            s of ds3 { (#,#) ipv4 ipv5 ->
                     case Chatterbot.chatterbot7
                            (GHC.Base.map
                               @ ([GHC.Types.Char], [[GHC.Types.Char]])
                               @ ([GHC.Base.String], [[GHC.Base.String]])
                               Chatterbot.chatterbot5
                               botRules)
                            ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            (GHC.Base.++
                               @ GHC.Types.Char
                               botName
                               (GHC.CString.unpackAppendCString#
                                  ": "#
                                  (case ipv7
                                          (Utilities.fix
                                             @ [[GHC.Types.Char]]
                                             GHC.Classes.$fEq[]_$s$fEq[]2
                                             Chatterbot.chatterbot4
                                             (Chatterbot.chatterbot3 ipv5)) of wild {
                                     [] -> GHC.Types.[] @ GHC.Types.Char
                                     : w ws
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          w
                                          (Data.OldList.unwords_go ws) })))
                            GHC.Types.True
                            ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                     case GHC.Base.eqString
                            (GHC.Base.map
                               @ GHC.Types.Char
                               @ GHC.Types.Char
                               GHC.Unicode.toLower
                               ipv5)
                            Chatterbot.chatterbot2 of wild {
                       GHC.Types.False
                       -> case GHC.IO.Handle.Text.hPutStr2
                                 GHC.IO.Handle.FD.stdout
                                 Chatterbot.chatterbot8
                                 GHC.Types.False
                                 ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                          botloop ipv10 }
                       GHC.Types.True -> (# ipv8, GHC.Tuple.() #) } } } }
                 } in
                 botloop ipv2 } }) -}
23040f10773fc9701e70883fcfb855eb
  chatterbot2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "quit"#) -}
88ce25d389927b3ac1e150024f0ec99a
  chatterbot3 :: [GHC.Types.Char] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 Data.OldList.words (Chatterbot.chatterbot_go x)) -}
cb7208962c2dbe280017c2aecf1dac0e
  chatterbot4 :: [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 1,
     Unfolding: (\ (x :: [[GHC.Types.Char]]) ->
                 case Chatterbot.chatterbot_$stransformationsApply
                        Chatterbot.reductions41
                        (GHC.Base.id @ [[GHC.Types.Char]])
                        Chatterbot.reductions
                        x of wild {
                   GHC.Base.Nothing -> x GHC.Base.Just x1 -> x1 }) -}
9aed287ff78a4dacfb86f9de94dd6bd6
  chatterbot5 ::
    ([GHC.Types.Char], [[GHC.Types.Char]])
    -> ([GHC.Base.String], [[GHC.Base.String]])
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ([GHC.Types.Char], [[GHC.Types.Char]])) ->
                 case w of ww { (,) ww1 ww2 ->
                 (Data.OldList.words
                    (GHC.Base.map
                       @ GHC.Types.Char
                       @ GHC.Types.Char
                       GHC.Unicode.toLower
                       ww1),
                  GHC.Base.map
                    @ [GHC.Types.Char]
                    @ [GHC.Base.String]
                    Chatterbot.chatterbot6
                    ww2) }) -}
d59dfad672f3e85f62750765011d7d54
  chatterbot6 :: [GHC.Types.Char] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Char]) ->
                 GHC.Base.build
                   @ GHC.Base.String
                   (\ @ b
                      (c :: GHC.Base.String -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    Data.OldList.wordsFB
                      @ b
                      c
                      n
                      (GHC.Base.build
                         @ GHC.Types.Char
                         (\ @ b1
                            (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                            (n1 :: b1)[OneShot] ->
                          GHC.Base.foldr
                            @ GHC.Types.Char
                            @ b1
                            (GHC.Base.mapFB
                               @ GHC.Types.Char
                               @ b1
                               @ GHC.Types.Char
                               c1
                               GHC.Unicode.toLower)
                            n1
                            x)))) -}
3af3d2f9d3d6b138fc52b88483912de4
  chatterbot7 ::
    Chatterbot.BotBrain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Chatterbot.Phrase -> Chatterbot.Phrase #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (brain :: Chatterbot.BotBrain)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, GHC.Types.Float)
                        @ GHC.Types.Float
                        r#
                        System.Random.$fRandomFloat2
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { GHC.Types.F# ipv2 ->
                 (# ipv,
                    let {
                      x :: [([[GHC.Types.Char]], [[GHC.Types.Char]])]
                      = GHC.Base.map
                          @ (Chatterbot.Phrase, [Chatterbot.Phrase])
                          @ (Chatterbot.Phrase, Chatterbot.Phrase)
                          (\ (ds2 :: (Chatterbot.Phrase, [Chatterbot.Phrase])) ->
                           case ds2 of wild1 { (,) x1 x2 ->
                           (x1,
                            Utilities.pick
                              @ GHC.Types.Float
                              @ Chatterbot.Phrase
                              GHC.Float.$fRealFracFloat
                              b1
                              x2) })
                          brain
                    } in
                    \ (x1 :: [[GHC.Types.Char]]) ->
                    case Chatterbot.chatterbot_$stransformationsApply
                           Chatterbot.reductions41
                           Chatterbot.reflect
                           x
                           x1 of wild1 {
                      GHC.Base.Nothing -> GHC.Types.[] @ [GHC.Types.Char]
                      GHC.Base.Just v -> v } #) } } }) -}
0db49de216341b13c6d13117c3234015
  chatterbot8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \: "#) -}
79f4e6c5c5fe980fd51c10622413b1ff
  chatterbot9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ". How are you?"#) -}
b0c46e6ded924419eb5b33e041dc59fd
  chatterbot_$smatch ::
    [GHC.Types.Char]
    -> [[GHC.Types.Char]]
    -> [[GHC.Types.Char]]
    -> GHC.Base.Maybe [[GHC.Types.Char]]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><S,U> -}
4809db87d2ad78f075a8c844f616511b
  chatterbot_$ssubstitute ::
    [GHC.Types.Char]
    -> [[GHC.Types.Char]] -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,U> -}
eb4e3afe3547723c1bb16a8eb2cfcb6c
  chatterbot_$stransformationApply ::
    [GHC.Types.Char]
    -> ([[GHC.Types.Char]] -> [[GHC.Types.Char]])
    -> [[GHC.Types.Char]]
    -> ([[GHC.Types.Char]], [[GHC.Types.Char]])
    -> GHC.Base.Maybe [[GHC.Types.Char]]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,1*C1(U)><S,U><S(SL),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [GHC.Types.Char])
                   (w1 :: [[GHC.Types.Char]] -> [[GHC.Types.Char]])
                   (w2 :: [[GHC.Types.Char]])
                   (w3 :: ([[GHC.Types.Char]], [[GHC.Types.Char]])) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 Chatterbot.$w$stransformationApply w w1 w2 ww1 ww2 }) -}
b05415d04f626de0142315d128380f15
  chatterbot_$stransformationsApply ::
    [GHC.Types.Char]
    -> ([[GHC.Types.Char]] -> [[GHC.Types.Char]])
    -> [([[GHC.Types.Char]], [[GHC.Types.Char]])]
    -> [[GHC.Types.Char]]
    -> GHC.Base.Maybe [[GHC.Types.Char]]
  {- Arity: 4, Strictness: <L,U><L,C(U)><S,1*U><L,U>,
     Unfolding: (\ (wc :: [GHC.Types.Char])
                   (func :: [[GHC.Types.Char]] -> [[GHC.Types.Char]])
                   (xs :: [([[GHC.Types.Char]], [[GHC.Types.Char]])])
                   (input :: [[GHC.Types.Char]]) ->
                 case GHC.Base.map
                        @ ([[GHC.Types.Char]], [[GHC.Types.Char]])
                        @ (GHC.Base.Maybe [[GHC.Types.Char]])
                        (Chatterbot.chatterbot_$stransformationApply wc func input)
                        xs of wild {
                   [] -> GHC.List.foldl2 @ (GHC.Base.Maybe [[GHC.Types.Char]])
                   : x xs1 -> Chatterbot.chatterbot_go1 xs1 x }) -}
29983f649154158e3da321059a56ed61
  chatterbot_go :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
b6701ee679ced5e10ebe2963879a667a
  chatterbot_go1 ::
    [GHC.Base.Maybe [[GHC.Types.Char]]]
    -> GHC.Base.Maybe [[GHC.Types.Char]]
    -> GHC.Base.Maybe [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
6445c3db2e700f81bf550072ea4025b6
  endOfDialog :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Char]) ->
                 GHC.Base.eqString
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b1
                         (c :: GHC.Types.Char -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b1
                         (GHC.Base.mapFB
                            @ GHC.Types.Char
                            @ b1
                            @ GHC.Types.Char
                            c
                            GHC.Unicode.toLower)
                         n
                         x))
                   Chatterbot.chatterbot2) -}
3a65699803e0980b6431f628c1313aa6
  longerWildcardMatch ::
    GHC.Classes.Eq a => [a] -> [a] -> GHC.Base.Maybe [a]
  {- Arity: 3, Strictness: <L,U(C(C1(U)),C(C1(U)))><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: [a])
                   (ds1 :: [a]) ->
                 case ds of wild {
                   [] -> Chatterbot.longerWildcardMatch2 @ a
                   : wc ps
                   -> case ds1 of wild1 {
                        [] -> Chatterbot.longerWildcardMatch2 @ a
                        : x xs
                        -> case Chatterbot.match @ a $dEq wc wild xs of wild2 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ [a]
                             GHC.Base.Just x1
                             -> GHC.Base.Just @ [a] (GHC.Types.: @ a x x1) } } }) -}
2a826456de140308364628ada3002e6c
  longerWildcardMatch2 :: GHC.Base.Maybe [a]
  {- Strictness: x -}
de794427445a593b54e4af84550d3364
  match :: GHC.Classes.Eq a => a -> [a] -> [a] -> GHC.Base.Maybe [a]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)))><L,U><S,U><S,U> -}
4ab13c6d791842be5a99bf6470e0a765
  prepare :: GHC.Base.String -> Chatterbot.Phrase
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 Utilities.fix
                   @ [[GHC.Types.Char]]
                   GHC.Classes.$fEq[]_$s$fEq[]2
                   Chatterbot.chatterbot4
                   (Chatterbot.chatterbot3 x)) -}
9c238f2d86dddb89dc314c23e74b185c
  present :: Chatterbot.Phrase -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True) Data.OldList.unwords -}
828b1bc22a591dc907fc26154e469e6c
  reduce :: Chatterbot.Phrase -> Chatterbot.Phrase
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (eta :: [[GHC.Types.Char]]) ->
                 Utilities.fix
                   @ [[GHC.Types.Char]]
                   GHC.Classes.$fEq[]_$s$fEq[]2
                   Chatterbot.chatterbot4
                   eta) -}
f5f392fb4bf06c1de996defa8dfa286d
  reductions :: [Chatterbot.PhrasePair]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Chatterbot.reductions47
                   Chatterbot.reductions1) -}
add0807140870597219754260585bc0a
  reductions1 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Chatterbot.reductions44
                   Chatterbot.reductions2) -}
cf8f81fd27c336e4143daf451f9cc7c4
  reductions10 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Chatterbot.reductions11
                   (GHC.Types.[] @ ([GHC.Base.String], [GHC.Base.String]))) -}
c1881d208d34fe9d47a4bed851975525
  reductions11 :: ([GHC.Base.String], [GHC.Base.String])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reductions14, Chatterbot.reductions12)) -}
71b6b74c282b50eccb8ba69c60ce64a7
  reductions12 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions13) -}
1ecc6b350f562d69f804919118296fe9
  reductions13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hello *"#) -}
28b56cbddb3e06200ed90e6dea11d856
  reductions14 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions15) -}
3e5a7d3d762e25c5740b2eccc8386e0a
  reductions15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hi *"#) -}
4be7084e69dd7d07b83976a57c436036
  reductions16 :: ([GHC.Base.String], [GHC.Base.String])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reductions19, Chatterbot.reductions17)) -}
db12b6386f2919eafce8decbe956c289
  reductions17 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions18) -}
08672d9426b3d71481193d8eb380bf02
  reductions18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i am *"#) -}
035a193bd408c1024046db0fd719d9c3
  reductions19 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions20) -}
16fa4a53c078af39fa5647893598d41e
  reductions2 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Chatterbot.reductions39
                   Chatterbot.reductions3) -}
bb21e171740920f3c67c2def778ec4ce
  reductions20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i am very *"#) -}
3d6a1b4a482fc9f7c3993dda8f770ce7
  reductions21 :: ([GHC.Base.String], [GHC.Base.String])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reductions24, Chatterbot.reductions22)) -}
64ad1ee5b110c0e24a11fea6243fe75e
  reductions22 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions23) -}
f167c5c38c1601ff7c7969f98b597cfb
  reductions23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "are you *"#) -}
c7fd765e286661b5a1e2c45e53687f41
  reductions24 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions_x1) -}
fb08d1a8784f38103d61598e74cd996a
  reductions25 :: ([GHC.Base.String], [GHC.Base.String])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reductions28, Chatterbot.reductions26)) -}
38e57deeb9d341cd337b81533413d4c6
  reductions26 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions27) -}
77b86b4473497b856792a7de1333e986
  reductions27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "what is *"#) -}
4e979238566e15a9a3355f456595da4b
  reductions28 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions_x2) -}
044005bf5421f3dbba3148345a58269b
  reductions29 :: ([GHC.Base.String], [GHC.Base.String])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reductions32, Chatterbot.reductions30)) -}
f877b5144d881e050cea7c641fc27406
  reductions3 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Chatterbot.reductions37
                   Chatterbot.reductions4) -}
d3821b4233bcbac53a70f804b7c94af9
  reductions30 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions31) -}
a2f182a7c1a58939979b97e742c30ae5
  reductions31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "who is *"#) -}
8d87295c766f13e963a57d1cc57a7093
  reductions32 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions_x3) -}
1a52a10fb3dcee5455fbbd21382024b2
  reductions33 :: ([GHC.Base.String], [GHC.Base.String])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reductions34, Chatterbot.reductions26)) -}
4774202bf4ce6dfd0f2f8945d5cba2b7
  reductions34 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions_x4) -}
7ddabda94db12614d127396db4ed848b
  reductions35 :: ([GHC.Base.String], [GHC.Base.String])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reductions36, Chatterbot.reductions30)) -}
97cc4c1ec0b9444c304a23ee6a16ef2e
  reductions36 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions_x5) -}
32c3e65d83ad20d73558d121c8742a98
  reductions37 :: ([GHC.Base.String], [GHC.Base.String])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reductions38, Chatterbot.reductions22)) -}
11a536acbf21b2b6d33110a5259b3469
  reductions38 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions_x6) -}
b1a0de7718c3053f121b03bb4c3bbaf1
  reductions39 :: ([GHC.Base.String], [GHC.Base.String])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reductions42, Chatterbot.reductions40)) -}
5f36fd58a7ec0ec92aadfff6db9cf8b3
  reductions4 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Chatterbot.reductions35
                   Chatterbot.reductions5) -}
8d1d10e145e10bfa665d760799655ff1
  reductions40 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions41) -}
e8255989c3146b3d509ec85cbf46ee63
  reductions41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "*"#) -}
0af90872546d64930cd93aed7e97cc95
  reductions42 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions43) -}
3a6e7594543e2675e3271b82a594508a
  reductions43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "could you *"#) -}
b10308bde821c3e91cbe4aca82715a84
  reductions44 :: ([GHC.Base.String], [GHC.Base.String])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reductions45, Chatterbot.reductions40)) -}
bc2f857bb3613101ff4650de1654d924
  reductions45 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions46) -}
12025af54f68aa6d22e338e9791b8a1d
  reductions46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "can you *"#) -}
a14ee79c59642874c0c6fabac8a58d8c
  reductions47 :: ([GHC.Base.String], [GHC.Base.String])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reductions48, Chatterbot.reductions40)) -}
d1a341ad327d424e17acbade5a3bad0c
  reductions48 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Chatterbot.reductions49) -}
dfaee2f670496db6353173ded13cb9bd
  reductions49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "please *"#) -}
0cb61b8bea355e24764ba4b3b483d205
  reductions5 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Chatterbot.reductions33
                   Chatterbot.reductions6) -}
b96d8550230b3d58e9f8f821f16bf9c5
  reductions6 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Chatterbot.reductions29
                   Chatterbot.reductions7) -}
bf2ef40f561c34af374783e57fc11388
  reductions7 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Chatterbot.reductions25
                   Chatterbot.reductions8) -}
d666ee40560674cb7e5b8b74a740842b
  reductions8 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Chatterbot.reductions21
                   Chatterbot.reductions9) -}
bc412acc123bb6625c0e07f27a2a3641
  reductions9 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Chatterbot.reductions16
                   Chatterbot.reductions10) -}
9a786deb1cee6b05f7a7cd6dfebec5ef
  reductionsApply ::
    [Chatterbot.PhrasePair] -> Chatterbot.Phrase -> Chatterbot.Phrase
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (x :: [([[GHC.Types.Char]], [[GHC.Types.Char]])])
                   (eta :: [[GHC.Types.Char]]) ->
                 Utilities.fix
                   @ [[GHC.Types.Char]]
                   GHC.Classes.$fEq[]_$s$fEq[]2
                   (\ (x1 :: [[GHC.Types.Char]]) ->
                    case Chatterbot.chatterbot_$stransformationsApply
                           Chatterbot.reductions41
                           (GHC.Base.id @ [[GHC.Types.Char]])
                           x
                           x1 of wild {
                      GHC.Base.Nothing -> x1 GHC.Base.Just x2 -> x2 })
                   eta) -}
768be9310d47ee84df2524f93a045656
  reductions_x1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "are you very *"#) -}
dd4bc407b11cba9cd2db89977296eff6
  reductions_x2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "do you know what * is"#) -}
34c53e56d105d4358c55bae766d92944
  reductions_x3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "do you know who * is"#) -}
3b007333cf877ca7c6edf116a6205f62
  reductions_x4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "tell me what * is"#) -}
d0b2cf9d3d57f36a5a3fa6dea17f0acd
  reductions_x5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "tell me who * is"#) -}
2c23695854836e6b017430784072f643
  reductions_x6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "tell me if you are *"#) -}
23a4230151a1dc5de0f4f2f833b57afc
  reflect :: Chatterbot.Phrase -> Chatterbot.Phrase
  {- Arity: 1,
     Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   Chatterbot.reflect1) -}
978dd0a77f848bb5fc636b9a255f35fb
  reflect1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Char]) ->
                 case GHC.List.lookup
                        @ [GHC.Types.Char]
                        @ [GHC.Types.Char]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        x
                        Chatterbot.reflections of wild {
                   GHC.Base.Nothing -> x GHC.Base.Just x1 -> x1 }) -}
52a5e71d3c58ee0ffa7ddac8b8b77308
  reflections :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections56
                   Chatterbot.reflections1) -}
f8a6779e4f40e3716077540b6ecb7809
  reflections1 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections53
                   Chatterbot.reflections2) -}
dda375656537e2919c5d29c4c85f565e
  reflections10 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections31
                   Chatterbot.reflections11) -}
14a7d9fe8b63ce20950758ff9a0afb21
  reflections11 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections28
                   Chatterbot.reflections12) -}
ee981686d129ad431ef6d11c2661fd36
  reflections12 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections25
                   Chatterbot.reflections13) -}
470fc02c53e1a9d44982b206845c65e8
  reflections13 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections22
                   Chatterbot.reflections14) -}
fc05e574a15098d0c89ea4149505dc2d
  reflections14 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections19
                   Chatterbot.reflections15) -}
4642249b06fbaec7388f0778c3e23cf8
  reflections15 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections16
                   (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Types.Char]))) -}
39b12616306d1132c1e4dfabfeea481c
  reflections16 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections18,
                  Chatterbot.reflections17)) -}
aa03a1f5529145447a1d5a565f389db8
  reflections17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "me"#) -}
e7e5d5a23cbd1361af1424b4ceb6d1ce
  reflections18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "you"#) -}
53be092ed82523910192b999cfae1392
  reflections19 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections21,
                  Chatterbot.reflections20)) -}
5da70b18fe26f1c951ec75391305b75e
  reflections2 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections51
                   Chatterbot.reflections3) -}
96053e995e1ae9241b10ec6736c8e35e
  reflections20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "mine"#) -}
7310588cae38b7dca97bcb0bc3ac2def
  reflections21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "yours"#) -}
17a2f7d328b441557935b477c334470e
  reflections22 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections24,
                  Chatterbot.reflections23)) -}
9a6ac22667ec36bb057039842fb8511c
  reflections23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "my"#) -}
83867df9a89b1a8379a4c6b6b946efcd
  reflections24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "your"#) -}
aa5aa4b9c7c219c1ecf590f0f7abdfd9
  reflections25 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections27,
                  Chatterbot.reflections26)) -}
48d0fa091c866612e3ad8861d10af209
  reflections26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i will"#) -}
03817e796bcae20ae5c13d2c36745611
  reflections27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "you'll"#) -}
0009eca87fc4c7ffa9e2539fb7237ac7
  reflections28 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections30,
                  Chatterbot.reflections29)) -}
229a9f6b092e6957f39569447d557a01
  reflections29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i have"#) -}
170368e82805debc6609108b9f1f483f
  reflections3 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections48
                   Chatterbot.reflections4) -}
aa3002a654f2ffbfaa91d68e034bc65d
  reflections30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "you've"#) -}
89388ed9f729a0c1e510510757fe53f8
  reflections31 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections33,
                  Chatterbot.reflections32)) -}
c9f90cd2063867f3e06bf49d1e412a15
  reflections32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i am"#) -}
24cb80eee90f9b82c770342eb9f6ed26
  reflections33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "you're"#) -}
ccdbef171ad4126424250844a8663165
  reflections34 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections36,
                  Chatterbot.reflections35)) -}
70bb9b7ac9a6569fab7e5d63a2a56d59
  reflections35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "am"#) -}
3b395e7b2c942ab5fbd4adf94d1c74bc
  reflections36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "are"#) -}
850512b8728ce1524e774d179b69809e
  reflections37 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections17,
                  Chatterbot.reflections18)) -}
6b2142af8d1d1ef95517aadc31b895d6
  reflections38 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections23,
                  Chatterbot.reflections24)) -}
43039b9bdb422adeea95dfebb32dfc5b
  reflections39 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections41,
                  Chatterbot.reflections40)) -}
9e79f5ffeb7bb442d81fb24a914d7c12
  reflections4 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections45
                   Chatterbot.reflections5) -}
166d187cd941f133b0b3a96e3dada361
  reflections40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "you will"#) -}
4d05421fd5bff5bd49cfa6cfca7e0ebb
  reflections41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i'll"#) -}
51c6e89b06a30c94fa5184337e085924
  reflections42 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections44,
                  Chatterbot.reflections43)) -}
782a7ead3801f7a419f9b84ff6b8d1cb
  reflections43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "you have"#) -}
bdc7fe04c2c871856b30e3cd70b5a2b9
  reflections44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i've"#) -}
cb255e3dc13f20002057f44f00c7214f
  reflections45 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections47,
                  Chatterbot.reflections46)) -}
d3f4cab1c406118dd6384e9c7c21d62e
  reflections46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "you would"#) -}
ced2eab266729abf496da2370377120e
  reflections47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i'd"#) -}
4cd9be22e5c5925eaa6d2c8353519439
  reflections48 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections50,
                  Chatterbot.reflections49)) -}
c698ede6fcc948c004222ba359e6495d
  reflections49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "you are"#) -}
b1e7ddd5c190374516fff5c85ab09509
  reflections5 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections42
                   Chatterbot.reflections6) -}
4f9651c8e1bcb9f0e7cc7666e6b890ad
  reflections50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i'm"#) -}
c4cccd31aeb0de43d23a9f781b5b0511
  reflections51 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections52,
                  Chatterbot.reflections18)) -}
5baf11bdc4d0508de506100ba8755abf
  reflections52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i"#) -}
02a0e56b85b5a9ce98bb112964f5162d
  reflections53 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections55,
                  Chatterbot.reflections54)) -}
6b5011b323e9eba5cc3c48201be8407f
  reflections54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "were"#) -}
461e70b3ddd20367836bdfb8c6611286
  reflections55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "was"#) -}
b73901efe1bcba2806e0bdc9dd6b8504
  reflections56 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Chatterbot.reflections35,
                  Chatterbot.reflections36)) -}
e426425026bbfe41229fe4ad9d7a6550
  reflections6 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections39
                   Chatterbot.reflections7) -}
b498de665092de340c524a314d8cfd64
  reflections7 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections38
                   Chatterbot.reflections8) -}
72def492d156bc6d0eec43ffc7c9fc11
  reflections8 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections37
                   Chatterbot.reflections9) -}
6026f954d47c23595baa615ec1ac30a1
  reflections9 :: [([GHC.Types.Char], [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   Chatterbot.reflections34
                   Chatterbot.reflections10) -}
6341aef5625c1525889deb2cdfacdfe6
  rulesApply ::
    [Chatterbot.PhrasePair] -> Chatterbot.Phrase -> Chatterbot.Phrase
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [([[GHC.Types.Char]], [[GHC.Types.Char]])])
                   (x1 :: [[GHC.Types.Char]]) ->
                 case Chatterbot.chatterbot_$stransformationsApply
                        Chatterbot.reductions41
                        Chatterbot.reflect
                        x
                        x1 of wild {
                   GHC.Base.Nothing -> GHC.Types.[] @ [GHC.Types.Char]
                   GHC.Base.Just v -> v }) -}
9c96901998f24e43b2af3d323c3ddb3b
  rulesCompile ::
    [(GHC.Base.String, [GHC.Base.String])] -> Chatterbot.BotBrain
  {- Arity: 1,
     Unfolding: (GHC.Base.map
                   @ ([GHC.Types.Char], [[GHC.Types.Char]])
                   @ ([GHC.Base.String], [[GHC.Base.String]])
                   Chatterbot.chatterbot5) -}
92cb255dd756b993e98f95d7ed00fb36
  singleWildcardMatch ::
    GHC.Classes.Eq a => [a] -> [a] -> GHC.Base.Maybe [a]
  {- Arity: 3, Strictness: <L,U(C(C1(U)),C(C1(U)))><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: [a])
                   (ds1 :: [a]) ->
                 case ds of wild {
                   [] -> Chatterbot.singleWildcardMatch2 @ a
                   : wc ps
                   -> case ds1 of wild1 {
                        [] -> Chatterbot.singleWildcardMatch2 @ a
                        : x xs
                        -> case Chatterbot.match @ a $dEq wc ps xs of wild2 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ [a]
                             GHC.Base.Just x1
                             -> GHC.Base.Just
                                  @ [a]
                                  (GHC.Types.: @ a x (GHC.Types.[] @ a)) } } }) -}
f1a2d3d20f30690ad4ca88d4e2fa2325
  singleWildcardMatch2 :: GHC.Base.Maybe [a]
  {- Strictness: x -}
164501748476bd9b97f418588649e8b5
  stateOfMind ::
    Chatterbot.BotBrain
    -> GHC.Types.IO (Chatterbot.Phrase -> Chatterbot.Phrase)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Chatterbot.chatterbot7
                  `cast`
                (<Chatterbot.BotBrain>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Chatterbot.Phrase -> Chatterbot.Phrase>_R)) -}
f44cc116f28733819c3ededb451c1768
  substitute :: GHC.Classes.Eq a => a -> [a] -> [a] -> [a]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U><S,1*U><L,U> -}
23bd7ec38703fa8ade07f578cb81d946
  transformationApply ::
    GHC.Classes.Eq a =>
    a -> ([a] -> [a]) -> [a] -> ([a], [a]) -> GHC.Base.Maybe [a]
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)))><L,U><L,1*C1(U)><S,U><S(SL),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: a)
                   (w2 :: [a] -> [a])
                   (w3 :: [a])
                   (w4 :: ([a], [a])) ->
                 case w4 of ww { (,) ww1 ww2 ->
                 Chatterbot.$wtransformationApply @ a w w1 w2 w3 ww1 ww2 }) -}
08002d438871f1945349196624b243a4
  transformationsApply ::
    GHC.Classes.Eq a =>
    a -> ([a] -> [a]) -> [([a], [a])] -> [a] -> GHC.Base.Maybe [a]
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),C(C1(U)))><L,U><L,C(U)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (wc :: a)
                   (func :: [a] -> [a])
                   (xs :: [([a], [a])])
                   (input :: [a]) ->
                 case GHC.Base.map
                        @ ([a], [a])
                        @ (GHC.Base.Maybe [a])
                        (Chatterbot.transformationApply @ a $dEq wc func input)
                        xs of wild {
                   [] -> GHC.List.foldl2 @ (GHC.Base.Maybe [a])
                   : x xs1 -> Chatterbot.transformationsApply1 @ a xs1 x }) -}
a517f800ae493a976c08947033f0cdb0
  transformationsApply1 ::
    [GHC.Base.Maybe [a]] -> GHC.Base.Maybe [a] -> GHC.Base.Maybe [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
"SPEC match @ [Char]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                 [GHC.Types.Char])
  Chatterbot.match @ [GHC.Types.Char] $dEq
  = Chatterbot.chatterbot_$smatch
"SPEC substitute @ [Char]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                      [GHC.Types.Char])
  Chatterbot.substitute @ [GHC.Types.Char] $dEq
  = Chatterbot.chatterbot_$ssubstitute
"SPEC transformationApply @ [Char]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                               [GHC.Types.Char])
  Chatterbot.transformationApply @ [GHC.Types.Char] $dEq
  = Chatterbot.chatterbot_$stransformationApply
"SPEC transformationsApply @ [Char]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                [GHC.Types.Char])
  Chatterbot.transformationsApply @ [GHC.Types.Char] $dEq
  = Chatterbot.chatterbot_$stransformationsApply
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False



==================== FINAL INTERFACE ====================
2017-04-08 18:00:09.544465 UTC

interface assignment1-0.1.0.0-2RzjC4JpVbO6M4vQTQJu9q:Utilities 8002
  interface hash: 6ff5f611fad7a0d604f00155746e5a5b
  ABI hash: 01a641d3c26e1bf0b92dd8f02c4b9be2
  export-list hash: 26ff6c4df3dc95a98eeaa41289ba5f83
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 60831682a37a02a996a9ac6f4cd42371
  sig of: Nothing
  used TH splices: False
  where
exports:
  Utilities.fix
  Utilities.map2
  Utilities.mmap
  Utilities.orElse
  Utilities.pick
  Utilities.try
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.Maybe ecf0c6f81372d9b58b142d5e758ea51b
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
85c57682c6ae995b290baf8757f4ed71
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Utilities.$trModule2
                   Utilities.$trModule1) -}
e6248683a6e88a75e42a8d9ac607e7cc
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Utilities"#) -}
fe2b4936981239bdcec2e81d3f4947ac
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "assignment1-0.1.0.0-2RzjC4JpVbO6M4vQTQJu9q"#) -}
d47cef3ea98151573d4e71837fc427d4
  fix :: GHC.Classes.Eq a => (a -> a) -> a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),U(C(C1(U)),A)><L,C(U)><L,U> -}
ab958694963d89dcc3f924a891221832
  map2 :: (a -> b, c -> d) -> (a, c) -> (b, d)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*C1(U),1*C1(U))><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b @ c @ d (ds :: (a -> b, c -> d)) (ds1 :: (a, c)) ->
                 case ds of wild { (,) f1 f2 ->
                 case ds1 of wild1 { (,) x1 x2 -> (f1 x1, f2 x2) } }) -}
43a7ec3ec2a7b4fc88b4f9140c99997a
  mmap :: (a -> b) -> GHC.Base.Maybe a -> GHC.Base.Maybe b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (f :: a -> b) (ds :: GHC.Base.Maybe a) ->
                 case ds of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ b
                   GHC.Base.Just x -> GHC.Base.Just @ b (f x) }) -}
8f90644c1a8844d63ca97e7e76669242
  orElse :: GHC.Base.Maybe a -> GHC.Base.Maybe a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ds :: GHC.Base.Maybe a) (x :: GHC.Base.Maybe a) ->
                 case ds of wild {
                   GHC.Base.Nothing -> x
                   GHC.Base.Just a1 -> GHC.Base.Just @ a a1 }) -}
d050d19cd22d7bce3084871f9eee6e51
  pick :: GHC.Real.RealFrac r => r -> [a] -> a
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))),U(1*U,A,A,A,A,A,1*C1(C1(U)))><L,U><S,U>,
     Unfolding: (\ @ r
                   @ a
                   ($dRealFrac :: GHC.Real.RealFrac r)
                   (eta :: r)
                   (eta1 :: [a]) ->
                 case GHC.Real.floor
                        @ r
                        $dRealFrac
                        @ GHC.Types.Int
                        GHC.Real.$fIntegralInt
                        (let {
                           $dReal :: GHC.Real.Real r = GHC.Real.$p1RealFrac @ r $dRealFrac
                         } in
                         let {
                           $dNum :: GHC.Num.Num r = GHC.Real.$p1Real @ r $dReal
                         } in
                         GHC.Num.*
                           @ r
                           $dNum
                           eta
                           (GHC.Num.fromInteger
                              @ r
                              $dNum
                              (case GHC.List.$wlenAcc @ a eta1 0# of ww2 { DEFAULT ->
                               GHC.Integer.Type.smallInteger ww2 }))) of ww { GHC.Types.I# ww1 ->
                 GHC.List.$w!! @ a eta1 ww1 }) -}
2b5e83b930c6572ab31231213ee8f531
  try :: (a -> GHC.Base.Maybe a) -> a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (f :: a -> GHC.Base.Maybe a) (x :: a) ->
                 case f x of wild {
                   GHC.Base.Nothing -> x GHC.Base.Just x1 -> x1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

